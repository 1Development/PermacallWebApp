@using PCAuthLibCore
@{
    ViewBag.Title = "Tools";
    var currentUser = Login.GetCurrentUser(Context);
}
<head>
    <link rel="stylesheet" href="~/css/WowTools.css" />
    <script>const whTooltips = { colorLinks: false, iconizeLinks: false, renameLinks: false };</script>
    <script src="https://wow.zamimg.com/widgets/power.js"></script>
</head>


<div class="contentBox col-lg-12 col-md-12" style="overflow-x:auto; font-weight: bold;">

    <p class="text-right" id="cacheStatus"> </p>
    <div>
        <span class="filter">
            <input id="onlyMaxLevel" name="onlyMaxLevel" type="checkbox" onchange="RenderTable(allCharacters)" checked>
            <label for="onlyMaxLevel">Max Level</label>
        </span>
        <span class="filter">
            <input id="mainsOnly" name="mainsOnly" type="checkbox" onchange="RenderTable(allCharacters)">
            <label for="mainsOnly">Mains Only</label>
        </span>
    </div>
    <table id="WowTable" class="table table-bordered" style="max-width: 100%">
        <thead>
            <tr style="background-color: rgba(255, 255, 255, 0.2);">
                <th>Player</th>
                <th>Avg. ILvL</th>
                <th>Main Hand</th>
                <th>Off Hand</th>
                <th>Head</th>
                <th>Neck</th>
                <th>Shoulder</th>
                <th>Back</th>
                <th>Chest</th>
                <th>Wrist</th>
                <th>Hands</th>
                <th>Waist</th>
                <th>Legs</th>
                <th>Feet</th>
                <th>Ring1</th>
                <th>Ring2</th>
                <th>Trinket1</th>
                <th>Trinket2</th>
            </tr>
        </thead>
        <tbody style="font-size: 125%; padding:3px">
        </tbody>

    </table>
    <br /><br />
    @if (currentUser.Permission >= PCAuthLibCore.User.PermissionGroup.OPERATOR)
    {
        <div>
            <button id="ShowAddButton" class="btn btn-primary" onclick="ShowAddCharacter()">Add new Character</button>
            <form id="addDiv" style="display: none;">
                <h4>Player name:</h4>
                <input name="player" />
                <h4>Character name:</h4>
                <input name="name" />
                <h4>Realm:</h4>
                <input name="realm" />
                <br />
                <h4>Main? <input type="checkbox" name="isMain" /></h4>
                <br />
                <button type="button" class="btn btn-primary" onclick="AddCharacter()">Add</button>
                <br />
                <p id="ErrorMessage" class="text-danger"></p>
            </form>
        </div>
    }
    @if (currentUser.Permission >= PCAuthLibCore.User.PermissionGroup.OPERATOR)
    {
        <script>
            window.CanDeleteCharacters = true;
        </script>
    }

    @section Scripts {
        <script type="text/javascript">
            var newRender = true;
            var allSlots = [
                'Main Hand',
                'Off Hand',
                'Head',
                'Neck',
                'Shoulders',
                'Back',
                'Chest',
                'Wrist',
                'Hands',
                'Waist',
                'Legs',
                'Feet',
                'Ring 1',
                'Ring 2',
                'Trinket 1',
                'Trinket 2'
            ];
            var allCharacters = [];

            function FetchTable() {
                UpdateTime(true);
                fetch('/tools/api/WowToolsApi/GetAllCharacters')
                    .then(response => response.json())
                    .then(data => {
                        //data.forEach(character => {
                        //    if (!allCharacters.find(char => char.id == character.id)) {
                        //        allCharacters.push(character);
                        //    }
                        //})
                        allCharacters = data;
                        RenderTable(allCharacters);
                    });
            }
            FetchTable();

            function RenderTable(data) {
                if ($('#WowTable tr').length <= 1) {
                    $("#WowTable tbody").empty();
                }

                data.forEach(character => {
                    //if (newRender) {
                    //    addCharacterToTable(character);
                    //}
                    if (!character.class) {
                        fetchAndUpdateCharacter(character.id);
                    }
                    else {
                        updateCharacter(character);
                    }
                });
                newRender = false;
            }

            function fetchAndUpdateCharacter(characterId) {
                fetch('/tools/api/WowToolsApi/GetCharacterItems/' + characterId)
                    .then(response => response.json())
                    .then(itemData => updateCharacter(itemData))
            }

            function fetchAndUpdateNewCache(characterId) {
                fetch('/tools/api/WowToolsApi/GetNewCharacterItems/' + characterId)
                    .then(response => response.json())
                    .then(itemData => updateCharacter(itemData));
            }

            function addCharacterToTable(character) {
                //console.log(character);
                var html = '<tr id="wowTableCharacter_' + character.id + '">' +
                    '<td>' + character.name + '</td><td></td>';
                allSlots.forEach(() => {
                    html = html + '<td></td>';
                });
                html = html + '</tr>';
                $('#WowTable tbody').append(html);
            }

            function updateCharacter(character) {
                if (character.character) {
                    Object.assign(character, character.character);
                    delete character.character;
                }
                //console.log(character);
                var characterIsUpdated = false;


                if (character.oldCache) {
                    setTimeout(() => {
                        fetchAndUpdateNewCache(character.id);
                    }, 1000);
                }

                if (character.items == undefined || character.class == undefined) {
                    setTimeout(() => {
                        fetchAndUpdateCharacter(character.id);
                    }, 5000);
                    return;
                }

                var characterInList = allCharacters.find(char => char.id == character.id);

                Object.assign(characterInList, character);
                //characterInList.averageItemLevel = character.averageItemLevel;
                //characterInList.equippedItemLevel = character.equippedItemLevel;
                //characterInList.cacheTime = character.cacheTime;
                //characterInList.oldCache = character.oldCache;

                var innerhtml = '<td class="Class' + character.class.replace(' ', '') + '"><a class="noLink" data-trigger="hover" data-toggle="popover" title="' + character.name + ' - ' + character.level + '" data-html="true" data-content="' + GeneratePopover(character) + '"';

                if (window.CanDeleteCharacters) {
                    innerhtml = innerhtml + 'onclick="FillDetails(' + character.id + ')"'
                }

                innerhtml = innerhtml + '>' + character.name + '</a>';

                //var innerhtml = '<td>' + character.name;
                if (window.CanDeleteCharacters) {
                    innerhtml = innerhtml + '<a class="text-danger" onclick="RemoveCharacter(' + character.id + ')">X</a>'
                }
                innerhtml = innerhtml + '</td>' +
                    '<td>' + character.equippedItemLevel + '/' + character.averageItemLevel + '</td>';

                allSlots.forEach(slotName => {
                    var item = character.items.find(item => item.slot == slotName);
                    if (item) {
                        if (characterInList && characterInList.items && characterInList.items.find(old => old.slot == slotName) && characterInList.items.find(old => old.slot == slotName).level != item.level) {
                            characterIsUpdated = true;
                        }
                        var itemLink = 'item=' + item.itemId + '&ilvl=' + item.level + '&lvl=' + character.level;
                        if (item.bonus) {
                            itemLink = itemLink + '&bonus=' + item.bonus;
                        }
                        if (item.gems) {
                            itemLink = itemLink + '&gems=' + item.gems;
                        }
                        if (item.enchants) {
                            itemLink = itemLink + '&ench=' + item.enchants;
                        }
                        innerhtml = innerhtml + '<td class="ItemQuality' + item.quality + '"><a class="noLink" href="https://wowhead.com/' + itemLink + '" data-wowhead="' + itemLink + '"> ' + item.level + '</a></td>';
                    }
                    else {
                        innerhtml = innerhtml + '<td></td>';
                    }
                });


                characterInList.items = character.items;

                if (shouldFilterCharacter(character)) {
                    $('#wowTableCharacter_' + character.id).remove();
                }
                else {
                    if ($('#wowTableCharacter_' + character.id).length <= 0) {
                        addCharacterToTable(character);
                    }

                    $('#wowTableCharacter_' + character.id).html(innerhtml);
                    if (characterIsUpdated) {
                        $("#wowTableCharacter_" + character.id + " td").effect("highlight", {}, 1500);
                    }
                }

                RenderUpdate();
            }
            function RenderUpdate() {
                queueAfterRender();
                RestartPopover();
            }

            function shouldFilterCharacter(character) {
                if ($('#mainsOnly').prop('checked')) {
                    if (!character.isMain) {
                        return true;
                    }
                }
                if ($('#onlyMaxLevel').prop('checked')) {
                    if (character.level < 60) {
                        return true;
                    }
                }

                return false;
            }

            function GeneratePopover(character) {
                var popupContent = '<span style="font-size: 90%; font-weight:normal;"> ';

                popupContent += character.race + ' ' + character.class + '<br/>';
                popupContent += 'Realm: ' + character.realm + '<br/>';

                if (character.playerName)
                    popupContent += 'Player: ' + character.playerName + '<br/>';

                popupContent += '<br/>Links: <br/>';
                popupContent += '<a target="_blank" href="https://worldofwarcraft.com/en-gb/character/eu/' + character.realm + '/' + character.name.toLowerCase() + '">Armory</a> <br/>';


                popupContent += '</span >';

                return popupContent.split('"').join('&quot;');
            }

            function RestartPopover() {
                $('[data-toggle="popover"]').popover({
                    trigger: "manual",
                    html: true,
                    animation: false
                }).on("mouseenter", function () {
                    var _this = this;
                    $(this).popover("show");
                    $(".popover").on("mouseleave", function () {
                        $(_this).popover('hide');
                    });
                }).on("mouseleave", function () {
                    var _this = this;
                    setTimeout(function () {
                        if (!$(".popover:hover").length) {
                            $(_this).popover("hide");
                        }
                    }, 100);
                });
            }

            function AddCharacter() {
                var form = {};
                $.each($('#addDiv').serializeArray(), function (i, field) {
                    if (field.value == 'on' || field.value == 'off') {
                        form[field.name] = field.value == 'on';
                    }
                    else {
                        form[field.name] = field.value;
                    }

                });
                fetch('/tools/api/WowToolsApi/AddCharacter/',
                    {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(form)
                    })
                    .then(function (response) {
                        return response.text()
                            .then(data => {
                                $('#ErrorMessage').text('');
                                if (data != "") {
                                    console.log(data);
                                    $('#ErrorMessage').text(data);
                                    FetchTable();
                                }
                                else {
                                    FetchTable();
                                    $("input[name=player]").val('');
                                    $("input[name=name]").val('');
                                    $("input[name=realm]").val('');
                                }
                            })
                    });
                return false;
            }

            function ShowAddCharacter(input) {
                if (input != undefined) {
                    if (input) {
                        $('#addDiv').hide();
                        $('#ShowAddButton').text('Add new Character')
                    }
                    else {
                        $('#addDiv').show();
                        $('#ShowAddButton').text('Hide');
                    }
                }

                if ($('#addDiv').is(":hidden")) {
                    $('#addDiv').show();
                    $('#ShowAddButton').text('Hide');
                }
                else {
                    $('#addDiv').hide();
                    $('#ShowAddButton').text('Add new Character')
                }
            }

            function RemoveCharacter(id) {
                if (confirm("Are you sure you want to remove " + allCharacters.find(char => char.id == id).name + '?')) {
                    fetch('/tools/api/WowToolsApi/RemoveCharacter/' + id,
                        { method: 'POST' })
                        .then(function (response) {
                            $("#WowTable tbody").empty();
                            FetchTable();
                        });
                }
            }

            function FillDetails(id) {
                var character = allCharacters.find(char => char.id == id);
                $("input[name=player]").val(character.playerName);
                $("input[name=name]").val(character.name);
                $("input[name=realm]").val(character.realm);
                $("input[name=isMain]").prop('checked', character.isMain);
                ShowAddCharacter(true);
            }

            var sortingTimeout;

            function queueAfterRender() {
                clearTimeout(sortingTimeout);

                sortingTimeout = setTimeout(function () {
                    SortTable($('#WowTable'), 'desc');
                    UpdateTime();
                }, 200);
            }

            function UpdateTime(startedLoading) {
                if (startedLoading || allCharacters.some((c) => {
                    return c.oldCache
                })) {
                    $('#cacheStatus').text('Loading data...');
                }
                else {
                    var latestUpdate =
                        allCharacters.reduce((max, char) => max.cacheTime > char.cacheTime ? max : char);

                    var refreshButton = '<button class="btn btn-primary btn-xs" onclick="FetchTable()"><span class="glyphicon glyphicon-refresh"></span></button>';
                    if (latestUpdate.cacheTime)
                        $('#cacheStatus').html('Updated at: ' + latestUpdate.cacheTime.replace('T', ' ').split('.')[0] + ' ' + refreshButton);
                }
            }

            function SortTable(table, order) {
                var asc = order === 'asc',
                    tbody = table.find('tbody');

                var findILevel = function (id) {
                    var charId = id.split("_")[1];
                    var character = allCharacters.find(char => char.id == charId);
                    if (!character) {
                        return 0;
                    }
                    return character.equippedItemLevel
                }

                SortAllCharacters(asc);

                tbody.find('tr').sort(function (a, b) {
                    //console.log('comparing: ' + $(a).attr('id') + ' - ' + $(b).attr('id'));
                    var levelA = findILevel($(a).attr('id'));
                    if (!levelA) levelA = 0;
                    var levelB = findILevel($(b).attr('id'));
                    if (!levelB) levelB = 0;

                    var result = 0;
                    if (levelA > levelB) {
                        result = -1;
                    }
                    else if (levelA < levelB) {
                        result = 1;
                    }

                    if (asc) {
                        return result * -1;
                    }
                    return result;
                }).appendTo(tbody);
            }

            function SortAllCharacters(asc) {
                return allCharacters.sort(function (a, b) {
                    var result = 0;
                    if (a.equippedItemLevel > b.equippedItemLevel) {
                        result = -1;
                    }
                    else if (a.equippedItemLevel < b.equippedItemLevel) {
                        result = 1;
                    }

                    if (asc) {
                        return result * -1;
                    }
                    return result;
                });
            }
        </script>
    }
</div>